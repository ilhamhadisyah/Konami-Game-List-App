// Generated by view binder compiler. Do not edit!
package com.example.listofgames.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import com.example.listofgames.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class GameItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView developer;

  @NonNull
  public final TextView europeRelease;

  @NonNull
  public final TextView japanRelease;

  @NonNull
  public final TextView name;

  @NonNull
  public final TextView northAmericaRelease;

  @NonNull
  public final TextView publisher;

  private GameItemBinding(@NonNull CardView rootView, @NonNull TextView developer,
      @NonNull TextView europeRelease, @NonNull TextView japanRelease, @NonNull TextView name,
      @NonNull TextView northAmericaRelease, @NonNull TextView publisher) {
    this.rootView = rootView;
    this.developer = developer;
    this.europeRelease = europeRelease;
    this.japanRelease = japanRelease;
    this.name = name;
    this.northAmericaRelease = northAmericaRelease;
    this.publisher = publisher;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static GameItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static GameItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.game_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static GameItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.developer;
      TextView developer = rootView.findViewById(id);
      if (developer == null) {
        break missingId;
      }

      id = R.id.europe_release;
      TextView europeRelease = rootView.findViewById(id);
      if (europeRelease == null) {
        break missingId;
      }

      id = R.id.japan_release;
      TextView japanRelease = rootView.findViewById(id);
      if (japanRelease == null) {
        break missingId;
      }

      id = R.id.name;
      TextView name = rootView.findViewById(id);
      if (name == null) {
        break missingId;
      }

      id = R.id.north_america_release;
      TextView northAmericaRelease = rootView.findViewById(id);
      if (northAmericaRelease == null) {
        break missingId;
      }

      id = R.id.publisher;
      TextView publisher = rootView.findViewById(id);
      if (publisher == null) {
        break missingId;
      }

      return new GameItemBinding((CardView) rootView, developer, europeRelease, japanRelease, name,
          northAmericaRelease, publisher);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
